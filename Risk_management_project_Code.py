# -*- coding: utf-8 -*-
"""Risk_Management_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hQt5dHsmjRwXIFz0Xul_Xz30bYq43sF9
"""

import warnings
warnings.filterwarnings('ignore')

"""1. Read Data"""

# read csv file
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
data = pd.read_csv('Data_Project.csv')
data = data.set_index(['Ticker Symbol', 'Calendar Data Year and Quarter'], drop=True, verify_integrity=True)
data = data.groupby(level=0).filter(lambda x: len(x) >= 35)
data.groupby(level=0).size()
data.drop(columns=['Active/Inactive Status Marker'], inplace=True)
data = data.rename(columns={'Long-Term Debt Due in One Year': 'Short_Term_Debt'})
data = data.rename(columns={'Long-Term Debt - Total': 'Long_Term_Debt'})
data.info(verbose=True, show_counts=True)

"""2. Merton and Vasicek Combined"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

rolling_window_size = 10

new_data = data.copy()

new_data['Total_Debt'] = new_data['Short_Term_Debt'] + new_data['Long_Term_Debt']
new_data['Asset_Std'] = np.nan
new_data['KMV_Distance'] = np.nan
new_data['KMV_Probability_of_Default'] = np.nan

time_to_maturity = 1
alerts = []

probability_of_default_list = []

for ticker in new_data.index.get_level_values('Ticker Symbol').unique():
    for i in range(len(new_data.loc[ticker]) - rolling_window_size):
        subset = new_data.loc[ticker].iloc[:i+rolling_window_size]


        equity_value = subset.iloc[-1]['Market Value - Total'] - 0.5 * subset.iloc[-1]['Long_Term_Debt'] - subset.iloc[-1]['Short_Term_Debt']
        total_assets = subset.iloc[-1]['Market Value - Total']
        debt_value = subset.iloc[-1]['Total_Debt']

        d1 = (np.log(total_assets / debt_value) + (0.5 * subset['Market Value - Total'].pct_change().std() ** 2) * time_to_maturity) / (subset['Market Value - Total'].pct_change().std() * np.sqrt(time_to_maturity))
        d2 = d1 - subset['Market Value - Total'].pct_change().std() * np.sqrt(time_to_maturity)

        merton_prob = norm.cdf(-d2)

        equity_volatility = subset['Market Value - Total'].pct_change().std()
        vasicek_prob = norm.cdf((np.log(debt_value / equity_value) + (equity_volatility ** 2) * time_to_maturity) / (equity_volatility * np.sqrt(time_to_maturity)))

        combined_prob = 0.5 * merton_prob + 0.5 * vasicek_prob

        new_data.at[(ticker, subset.index[-1]), 'KMV_Probability_of_Default'] = combined_prob

        probability_of_default_list.append(combined_prob)

        if combined_prob > 0.7:
            quarter = new_data.index.get_level_values('Calendar Data Year and Quarter')[i + rolling_window_size - 1]
            print(f"Alert: Probability of default for {ticker} exceeds 0.7. Quarter: {quarter}")
            alerts.append(f"Alert: Probability of default for {ticker} exceeds 0.7. Quarter: {quarter}")

import numpy as np
import matplotlib.pyplot as plt

plt.figure(figsize=(15, 10))

plt.subplot(3, 1, 1)
plt.plot(probability_of_default_list, label='Probability of Default', marker='o', color='b')

above_threshold_indices = np.where(np.array(probability_of_default_list) > 0.7)[0]
plt.scatter(above_threshold_indices, np.array(probability_of_default_list)[above_threshold_indices], color='r')

plt.axhline(y=0.7, color='r', linestyle='--', label='Threshold (0.7)')
plt.title('Probability of Default Over Time')
plt.xlabel('Time')
plt.ylabel('Probability of Default')
plt.legend().set_visible(False)

plt.tight_layout()
plt.show()
print(100*np.mean(probability_of_default_list))

"""3. KMV model"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

rolling_window_size = 10

new_data = data.copy()

new_data['Total_Debt'] = new_data['Short_Term_Debt'] + new_data['Long_Term_Debt']
new_data['Asset_Std'] = np.nan
new_data['KMV_Distance'] = np.nan
new_data['KMV_Probability_of_Default'] = np.nan

time_to_maturity = 1
alerts = []

probability_of_default_list = []

for ticker in new_data.index.get_level_values('Ticker Symbol').unique():
    for i in range(len(new_data.loc[ticker]) - rolling_window_size):
        subset = new_data.loc[ticker].iloc[:i+rolling_window_size]
        std = subset['Market Value - Total'].pct_change().std()
        mean = subset['Market Value - Total'].pct_change().mean()

        d = (np.log(subset.iloc[-1]['Market Value - Total'] / (0.5 * subset.iloc[-1]['Long_Term_Debt'] + subset.iloc[-1]['Short_Term_Debt'])) + (mean - std/2) * time_to_maturity) / (std * np.sqrt(time_to_maturity))
        p = min(d / 40, 1)

        new_data.at[(ticker, subset.index[-1]), 'KMV_Probability_of_Default'] = p

        probability_of_default_list.append(p)

        if p > 0.7:
            quarter = new_data.index.get_level_values('Calendar Data Year and Quarter')[i + rolling_window_size - 1]
            print(f"Alert: Probability of default for {ticker} exceeds 0.7. Quarter: {quarter}")
            alerts.append(f"Alert: Probability of default for {ticker} exceeds 0.7. Quarter: {quarter}")

import numpy as np
import matplotlib.pyplot as plt

plt.figure(figsize=(15, 10))
plt.subplot(3, 1, 1)
plt.plot(probability_of_default_list, label='Probability of Default', marker='o', color='b')

above_threshold_indices = np.where(np.array(probability_of_default_list) > 0.7)[0]
plt.scatter(above_threshold_indices, np.array(probability_of_default_list)[above_threshold_indices], color='r')

plt.axhline(y=0.7, color='r', linestyle='--', label='Threshold (0.7)')
plt.title('Probability of Default Over Time')
plt.xlabel('Time')
plt.ylabel('Probability of Default')
plt.legend().set_visible(False)

plt.tight_layout()
plt.show()
print(100*np.mean(probability_of_default_list))

"""4. Copula Model"""

debt_changes = new_data['Total_Debt'].pct_change().dropna()
value_changes = new_data['Market Value - Total'].pct_change().dropna()
changes_data = pd.DataFrame({'Total_Debt_Change': debt_changes, 'Value_Change': value_changes})
merged_data = new_data.merge(changes_data, left_index=True, right_index=True)
merged_data.dropna(subset=['Total_Debt_Change', 'Value_Change'], inplace=True)

copula_family = 'gumbel'
market_value_changes = merged_data['Market Value - Total'].pct_change().dropna()
total_debt_changes = merged_data['Total_Debt'].pct_change().dropna()

market_value_changes = np.clip(market_value_changes, 0, 1)
total_debt_changes = np.clip(total_debt_changes, 0, 1)

copula = Gumbel()
copula.fit(np.column_stack((market_value_changes.values, total_debt_changes.values)))

copula_samples = copula.sample(len(merged_data))

asset_cdfs = {'Market Value - Total': Beta(a=2, b=5), 'Total_Debt': Beta(a=2, b=5)}
transformed_samples = pd.DataFrame({
    asset: asset_cdfs[asset].ppf(copula_samples[:, i])
    for i, asset in enumerate(['Market Value - Total', 'Total_Debt'])
})

threshold = 0.6

probability_of_default_copula = []
for i in range(len(merged_data)):
    p_default = transformed_samples.iloc[i]['Market Value - Total'] * transformed_samples.iloc[i]['Total_Debt']
    probability_of_default_copula.append(p_default)

    if p_default > threshold:
        ticker = merged_data.index.get_level_values('Ticker Symbol')[i]
        quarter = merged_data.index.get_level_values('Calendar Data Year and Quarter')[i]
        print(f"Alert: Probability of default for {ticker} exceeds {threshold}. Quarter: {quarter}")

plt.figure(figsize=(10, 6))
plt.plot(probability_of_default_copula, label='Copula Model', marker='o', color='b')
plt.axhline(y=threshold, color='r', linestyle='--', label=f'Threshold ({threshold})')
plt.title('Probability of Default Using Copula Model')
plt.xlabel('Time')
plt.ylabel('Probability of Default')
plt.legend()
plt.show()
print(100*np.mean(probability_of_default_copula))

from copulas.bivariate import *
from copulas import *
from scipy.stats import beta as Beta
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

copula_family = 'clayton'
market_value_changes = merged_data['Market Value - Total'].pct_change().dropna()
total_debt_changes = merged_data['Total_Debt'].pct_change().dropna()

market_value_changes = np.clip(market_value_changes, 0, 1)
total_debt_changes = np.clip(total_debt_changes, 0, 1)

copula = Clayton()
copula.fit(np.column_stack((market_value_changes.values, total_debt_changes.values)))

copula_samples = copula.sample(len(merged_data))

asset_cdfs = {'Market Value - Total': Beta(a=2, b=5), 'Total_Debt': Beta(a=2, b=5)}
transformed_samples = pd.DataFrame({
    asset: asset_cdfs[asset].ppf(copula_samples[:, i])
    for i, asset in enumerate(['Market Value - Total', 'Total_Debt'])
})

threshold = 0.6

probability_of_default_copula = []
for i in range(len(merged_data)):
    p_default = transformed_samples.iloc[i]['Market Value - Total'] * transformed_samples.iloc[i]['Total_Debt']
    probability_of_default_copula.append(p_default)

    if p_default > threshold:
        ticker = merged_data.index.get_level_values('Ticker Symbol')[i]
        quarter = merged_data.index.get_level_values('Calendar Data Year and Quarter')[i]
        print(f"Alert: Probability of default for {ticker} exceeds {threshold}. Quarter: {quarter}")

plt.figure(figsize=(10, 6))
plt.plot(probability_of_default_copula, label='Copula Model', marker='o', color='b')
plt.axhline(y=threshold, color='r', linestyle='--', label=f'Threshold ({threshold})')
plt.title('Probability of Default Using Copula Model')
plt.xlabel('Time')
plt.ylabel('Probability of Default')
plt.legend()
plt.show()
print(100*np.mean(probability_of_default_copula))